name: autobuild

on:
  release:
    types: [published]

jobs:
  linux64-appimage:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: docker
      run: |
        mkdir /tmp/dist
        docker run --device /dev/fuse --privileged --name uu -d -v $PWD:/code -v /tmp/dist:/dist ubuntu:14.04 sleep 900
    - name: install prerequisites
      run: docker exec uu sh -c 'apt-get update && apt-get install -y libfuse2 libglib2.0-0 qtbase5-dev binutils g++ file qttools5-dev-tools make libpng12-dev gtk2-engines-pixbuf gtk2-engines pkg-config gnome-themes-standard libgtk2.0-dev'
    - name: copy gtk libs
      run: docker exec uu sh -c 'install -d /dist/usr/lib/gtk-2.0 && cp -va $(pkg-config --variable=libdir gtk+-2.0)/gtk-2.0/$(pkg-config --variable=gtk_binary_version gtk+-2.0)/* /dist/usr/lib/gtk-2.0'
    - name: configure
      run: docker exec uu sh -c 'cd /code && ./configure --prefix=/usr'
    - name: make
      run: docker exec uu sh -c 'make -C /code || find /code'
    - name: make install
      run: docker exec uu sh -c "make -C /code install DESTDIR=/dist"
    - name: get linuxdeploy
      run: |
        wget https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage
        chmod 755 linuxdeployqt-7-x86_64.AppImage
    - name: build appimage
      run: docker exec uu sh -c 'install /code/contrib/AppRun /dist/ && cd /dist && LD_LIBRARY_PATH=/dist/usr/lib64 /code/linuxdeployqt-7-x86_64.AppImage ./usr/share/applications/qpxtool.desktop -appimage -verbose=2'
    - name: get appimage name
      id: dist
      run: |
        archive=$(find /tmp/dist -type f -name "QPx*.AppImage")
        echo "::set-output name=archive::$archive"
        echo "appimage is <$archive>"
        name="QPxTool-$(echo "${{ github.ref }}" | grep -Eo '[^/]+$')-x86_64.AppImage"
        echo "::set-output name=name::$name"
        echo "appname is <$name>"
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.dist.outputs.archive }}
        asset_name: ${{ steps.dist.outputs.name }}
        asset_content_type: application/octet-stream
